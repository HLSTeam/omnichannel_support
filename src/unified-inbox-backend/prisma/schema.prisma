generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id                                                      String               @id
  email                                                   String               @unique
  name                                                    String
  password                                                String
  role                                                    Role                 @default(AGENT)
  createdAt                                               DateTime             @default(now())
  BroadcastSession                                        BroadcastSession[]
  Message                                                 Message[]
  helpdesk_tickets_helpdesk_tickets_assignedToToAgent     helpdesk_tickets[]   @relation("helpdesk_tickets_assignedToToAgent")
  helpdesk_tickets_helpdesk_tickets_createdByToAgent      helpdesk_tickets[]   @relation("helpdesk_tickets_createdByToAgent")
  ticket_assignments_ticket_assignments_agentIdToAgent    ticket_assignments[] @relation("ticket_assignments_agentIdToAgent")
  ticket_assignments_ticket_assignments_assignedByToAgent ticket_assignments[] @relation("ticket_assignments_assignedByToAgent")
  ticket_comments                                         ticket_comments[]
  ticket_history                                          ticket_history[]
}

model BroadcastSession {
  id               String          @id
  content          String
  filtersJson      Json
  targetCount      Int
  targetIds        String[]
  status           BroadcastStatus @default(PENDING)
  createdAt        DateTime        @default(now())
  executedAt       DateTime?
  createdByAgentId String
  Agent            Agent           @relation(fields: [createdByAgentId], references: [id])
}

model Channel {
  id           String         @id
  type         String
  token        String?
  systemId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  System       System         @relation(fields: [systemId], references: [id])
  Conversation Conversation[]

  @@unique([systemId, type])
}

model Conversation {
  id               String             @id
  platformChatId   String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  systemId         String
  channelId        String
  name             String?
  type             String
  Channel          Channel            @relation(fields: [channelId], references: [id])
  System           System             @relation(fields: [systemId], references: [id])
  Message          Message[]
  helpdesk_tickets helpdesk_tickets[]

  @@unique([channelId, platformChatId])
}

model Message {
  id                String       @id
  platformMessageId String       @unique
  text              String?
  sender            String
  createdAt         DateTime     @default(now())
  conversationId    String
  agentId           String?
  Agent             Agent?       @relation(fields: [agentId], references: [id])
  Conversation      Conversation @relation(fields: [conversationId], references: [id])
}

model Rule {
  id        String   @id
  keyword   String
  response  String
  systemId  String
  createdAt DateTime @default(now())
  System    System   @relation(fields: [systemId], references: [id])

  @@unique([systemId, keyword])
}

model System {
  id                String              @id @default(cuid())
  name              String
  elasticUrl        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  Channel           Channel[]
  Conversation      Conversation[]
  Rule              Rule[]
  user_declarations UserDeclaration[]
  group_permissions group_permissions[]
  helpdesk_tickets  helpdesk_tickets[]
  telegram_groups   telegram_groups[]
}

model group_permissions {
  id              String            @id @default(cuid())
  groupType       GroupType
  permissionName  String
  description     String?
  createdAt       DateTime          @default(now())
  systemId        String
  System          System            @relation(fields: [systemId], references: [id])
  telegram_groups telegram_groups[] @relation("GroupPermissionToTelegramGroup")

  @@unique([systemId, groupType, permissionName])
}

model UserDeclaration {
  id        String          @id @default(cuid())
  userId    String
  username  String
  groupId   String
  systemId  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  group     telegram_groups @relation(fields: [groupId], references: [id])
  system    System          @relation(fields: [systemId], references: [id])

  @@unique([userId, groupId, systemId])
}

model helpdesk_tickets {
  id                                       String               @id @default(cuid())
  title                                    String
  description                              String
  priority                                 TicketPriority
  category                                 TicketCategory
  status                                   TicketStatus
  conversationId                           String?
  assignedTo                               String?
  createdBy                                String
  aiAssisted                               Boolean              @default(false)
  createdAt                                DateTime             @default(now())
  updatedAt                                DateTime             @updatedAt
  resolvedAt                               DateTime?
  deletedAt                                DateTime?
  systemId                                 String
  Agent_helpdesk_tickets_assignedToToAgent Agent?               @relation("helpdesk_tickets_assignedToToAgent", fields: [assignedTo], references: [id])
  Conversation                             Conversation?        @relation(fields: [conversationId], references: [id])
  Agent_helpdesk_tickets_createdByToAgent  Agent                @relation("helpdesk_tickets_createdByToAgent", fields: [createdBy], references: [id])
  System                                   System               @relation(fields: [systemId], references: [id])
  ticket_assignments                       ticket_assignments[]
  ticket_comments                          ticket_comments[]
  ticket_history                           ticket_history[]
}

model notification_logs {
  id              String          @id @default(cuid())
  telegramGroupId String
  messageContent  String
  messageType     String
  priority        String          @default("normal")
  status          String          @default("pending")
  sentAt          DateTime?
  errorMessage    String?
  referenceType   String?
  referenceId     String?
  createdAt       DateTime        @default(now())
  telegram_groups telegram_groups @relation(fields: [telegramGroupId], references: [id])
}

model telegram_groups {
  id                String              @id @default(cuid())
  groupName         String
  groupType         GroupType
  chatId            String              @unique
  description       String?
  isActive          Boolean             @default(true)
  chatTitle         String?
  memberCount       Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  systemId          String
  user_declarations UserDeclaration[]
  notification_logs notification_logs[]
  System            System              @relation(fields: [systemId], references: [id])
  group_permissions group_permissions[] @relation("GroupPermissionToTelegramGroup")
}

model ticket_assignments {
  id                                         String           @id @default(cuid())
  ticketId                                   String
  agentId                                    String
  assignedBy                                 String
  assignedAt                                 DateTime         @default(now())
  unassignedAt                               DateTime?
  Agent_ticket_assignments_agentIdToAgent    Agent            @relation("ticket_assignments_agentIdToAgent", fields: [agentId], references: [id])
  Agent_ticket_assignments_assignedByToAgent Agent            @relation("ticket_assignments_assignedByToAgent", fields: [assignedBy], references: [id])
  helpdesk_tickets                           helpdesk_tickets @relation(fields: [ticketId], references: [id])
}

model ticket_comments {
  id               String           @id @default(cuid())
  content          String
  ticketId         String
  userId           String
  createdAt        DateTime         @default(now())
  helpdesk_tickets helpdesk_tickets @relation(fields: [ticketId], references: [id])
  Agent            Agent            @relation(fields: [userId], references: [id])
}

model ticket_history {
  id               String           @id @default(cuid())
  ticketId         String
  field            String
  oldValue         String?
  newValue         String?
  changedBy        String
  createdAt        DateTime         @default(now())
  Agent            Agent            @relation(fields: [changedBy], references: [id])
  helpdesk_tickets helpdesk_tickets @relation(fields: [ticketId], references: [id])
}

enum BroadcastStatus {
  PENDING
  EXECUTING
  SENT
  CANCELLED
}

enum GroupType {
  ADMIN
  CUSTOMER
  SUPPLIER
}

enum Role {
  AGENT
  ADMIN
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  FEATURE_REQUEST
  BUG_REPORT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  REVIEW
  RESOLVED
  CLOSED
}
