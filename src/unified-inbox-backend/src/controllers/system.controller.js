import prisma from '../db.js';
import elasticsearchService from '../services/elasticsearch.service.js';

// H√†m ƒë·ªÉ t·∫°o m·ªôt h·ªá th·ªëng m·ªõi
const createSystem = async (req, res) => {
  const { name, elasticUrl } = req.body;
  if (!name) {
    return res.status(400).json({ error: 'T√™n h·ªá th·ªëng (name) l√† b·∫Øt bu·ªôc.' });
  }

  try {
    const newSystem = await prisma.system.create({
      data: {
        name: name,
        elasticUrl: elasticUrl || null,
      },
    });
    res.status(201).json({
      status: 'success',
      data: newSystem
    });
  } catch (error) {
    console.error('Error creating system:', error);
    res.status(500).json({ 
      status: 'error',
      error: 'Kh√¥ng th·ªÉ t·∫°o h·ªá th·ªëng.',
      message: error.message
    });
  }
};

// H√†m ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ h·ªá th·ªëng
const getAllSystems = async (req, res) => {
  try {
    const allSystems = await prisma.system.findMany({
      include: { Channel: true }, // Fix: d√πng Channel thay v√¨ channels
    });
    res.status(200).json({
      status: 'success',
      data: allSystems
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'error',
      message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch h·ªá th·ªëng.',
      error: error.message
    });
  }
};

// H√†m ƒë·ªÉ c·∫≠p nh·∫≠t m·ªôt h·ªá th·ªëng (ƒë·ªÉ th√™m k√™nh)
const updateSystem = async (req, res) => {
  const { id } = req.params;
  const { channels, name, elasticUrl } = req.body;

  // Ki·ªÉm tra th√¥ng tin k√™nh Telegram n·∫øu c√≥
  let channelsData = undefined;
  if (channels && channels.telegram && channels.telegram.token) {
    channelsData = {
      upsert: {
        where: { systemId_type: { systemId: id, type: 'TELEGRAM' } },
        update: { token: channels.telegram.token },
        create: { type: 'TELEGRAM', token: channels.telegram.token },
      },
    };
  }

  // T·∫°o object data ƒë·ªÉ c·∫≠p nh·∫≠t
  const updateData = {};
  if (name) updateData.name = name;
  if (elasticUrl !== undefined) updateData.elasticUrl = elasticUrl;
  if (channelsData) updateData.channels = channelsData;

  if (Object.keys(updateData).length === 0) {
    return res.status(400).json({ 
      status: 'error',
      error: 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t.' 
    });
  }

  try {
    const updatedSystem = await prisma.system.update({
      where: { id: id },
      data: updateData,
      include: { Channel: true }, // Fix: d√πng Channel thay v√¨ channels
    });
    
    // Clear Elasticsearch URL cache if elasticUrl was updated
    if (elasticUrl !== undefined) {
      elasticsearchService.clearUrlCache(id);
      console.log(`üîÑ Cleared Elasticsearch URL cache for system ${id}`);
    }
    
    res.status(200).json({
      status: 'success',
      data: updatedSystem
    });
  } catch (error) {
    console.error(error);
    res.status(404).json({ 
      status: 'error',
      error: 'Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªá th·ªëng.',
      message: error.message
    });
  }
};

// H√†m ƒë·ªÉ x√≥a m·ªôt h·ªá th·ªëng
const deleteSystem = async (req, res) => {
  const { id } = req.params;

  try {
    // Check if system exists
    const existingSystem = await prisma.system.findUnique({
      where: { id: id },
      include: {
        Channel: true,
        Conversation: true,
        Rule: true,
        telegram_groups: true,
        helpdesk_tickets: true
      }
    });

    if (!existingSystem) {
      return res.status(404).json({ 
        status: 'error',
        error: 'Kh√¥ng t√¨m th·∫•y h·ªá th·ªëng.' 
      });
    }

    // Check if system has related data
    const hasRelatedData = 
      existingSystem.Channel.length > 0 ||
      existingSystem.Conversation.length > 0 ||
      existingSystem.Rule.length > 0 ||
      existingSystem.telegram_groups.length > 0 ||
      existingSystem.helpdesk_tickets.length > 0;

    if (hasRelatedData) {
      return res.status(400).json({ 
        status: 'error',
        error: 'Kh√¥ng th·ªÉ x√≥a h·ªá th·ªëng c√≥ d·ªØ li·ªáu li√™n quan. Vui l√≤ng x√≥a c√°c d·ªØ li·ªáu li√™n quan tr∆∞·ªõc.',
        relatedData: {
          channels: existingSystem.Channel.length,
          conversations: existingSystem.Conversation.length,
          rules: existingSystem.Rule.length,
          telegramGroups: existingSystem.telegram_groups.length,
          tickets: existingSystem.helpdesk_tickets.length
        }
      });
    }

    // Delete the system
    await prisma.system.delete({
      where: { id: id }
    });

    res.status(200).json({
      status: 'success',
      message: 'H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.'
    });
  } catch (error) {
    console.error('Error deleting system:', error);
    res.status(500).json({ 
      status: 'error',
      error: 'Kh√¥ng th·ªÉ x√≥a h·ªá th·ªëng.',
      message: error.message
    });
  }
};

export {
  createSystem,
  getAllSystems,
  updateSystem,
  deleteSystem,
};